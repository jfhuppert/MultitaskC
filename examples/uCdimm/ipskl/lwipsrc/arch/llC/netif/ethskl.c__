/*-----------------------------------------------------------------------------------*/
/*
	ethskl.c
*/
/*-----------------------------------------------------------------------------------*/

#include "lwip/debug.h"

#include "lwip/opt.h"
#include "lwip/def.h"
#include "lwip/mem.h"
#include "lwip/pbuf.h"
#include "lwip/sys.h"

#include "netif/arp.h"

#define IFNAME0 'c'
#define IFNAME1 's'

struct ethskl {
  struct eth_addr *ethaddr;
  /* Add whatever per-interface state that is needed here. */
};

static const struct eth_addr ethbroadcast = {{0xffff,0xffff,0xffff}};

void  ethskl_input(struct netif *netif);
err_t ethskl_output(struct netif *netif,struct pbuf *p,struct ip_addr *ipaddr);

/*-----------------------------------------------------------------------------------*/
static void low_level_init(struct netif *netif)
{
}
/*-----------------------------------------------------------------------------------*/
/*
 * low_level_output():
 *
 * Should do the actual transmission of the packet. The packet is
 * contained in the pbuf that is passed to the function. This pbuf
 * might be chained.
 *
 */
/*-----------------------------------------------------------------------------------*/
static err_t low_level_output(struct ethskl *ethskl, struct pbuf *p)
{
#if 0
  struct pbuf *q;

  initiate transfer();
  
  for(q = p; q != NULL; q = q->next) {
    /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
    send data from(q->payload, q->len);
  }

  signal that packet should be sent();
#endif
  
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
/*
 * low_level_input():
 *
 * Should allocate a pbuf and transfer the bytes of the incoming
 * packet from the interface into the pbuf.
 *
 */
/*-----------------------------------------------------------------------------------*/
static struct pbuf *low_level_input(struct ethskl *ethskl)
{
#if 0
  struct pbuf *p, *q;
  u16_t len;

  /* Obtain the size of the packet and put it into the "len"
     variable. */
  len = ;

  /* We allocate a pbuf chain of pbufs from the pool. */
  p = pbuf_alloc(PBUF_LINK, len, PBUF_POOL);
  
  if(p != NULL) {
    /* We iterate over the pbuf chain until we have read the entire
       packet into the pbuf. */
    for(q = p; q != NULL; q = q->next) {
      /* Read enough bytes to fill this pbuf in the chain. The
         avaliable data in the pbuf is given by the q->len
         variable. */
      read data into(q->payload, q->len);
    }
    acknowledge that packet has been read();
  } else {
    drop packet();
  }

  return p;  
#endif

  return NULL;  
}
/*-----------------------------------------------------------------------------------*/
/*
 * ethskl_output():
 *
 * This function is called by the TCP/IP stack when an IP packet
 * should be sent. It calls the function called low_level_output() to
 * do the actuall transmission of the packet.
 *
 */
/*-----------------------------------------------------------------------------------*/
err_t ethskl_output(struct netif *netif,struct pbuf *p,struct ip_addr *ipaddr)
{
  struct ethskl *ethskl;
  struct pbuf *q;
  struct eth_hdr *ethhdr;
  struct eth_addr *dest, mcastaddr;
  struct ip_addr *queryaddr;
  err_t err;
  u8_t i;
  
  ethskl=netif->state;

  /* Make room for Ethernet header. */
  if(pbuf_header(p, 14) != 0) {
    /* The pbuf_header() call shouldn't fail, but we allocate an extra pbuf just in case. */
    q=pbuf_alloc(PBUF_LINK, 14, PBUF_RAM);
    if(q==NULL) { return ERR_MEM; }
    pbuf_chain(q,p);
    p=q;
  }

  /* Construct Ethernet header. Start with looking up deciding which
     MAC address to use as a destination address. Broadcasts and
     multicasts are special, all other addresses are looked up in the
     ARP table. */
  queryaddr = ipaddr;
  if(ip_addr_isany(ipaddr) ||
     ip_addr_isbroadcast(ipaddr, &(netif->netmask))) {
    dest = (struct eth_addr *)&ethbroadcast;
  } else if(ip_addr_ismulticast(ipaddr)) {
    /* Hash IP multicast address to MAC address. */
    mcastaddr.addr[0] = HTONS(0x01 << 8);
    mcastaddr.addr[1] = HTONS((0x5e << 8) | (ip4_addr2(ipaddr) & 0x7f));
    mcastaddr.addr[2] = HTONS((ip4_addr3(ipaddr) << 8) | ip4_addr4(ipaddr));
    dest = &mcastaddr;
  } else {
    if(ip_addr_maskcmp(ipaddr, &(netif->ip_addr), &(netif->netmask))) {
      /* Use destination IP address if the destination is on the same subnet as we are. */
      queryaddr = ipaddr;
    } else {
      /* Otherwise we use the default router as the address to send the Ethernet frame to. */
      queryaddr = &(netif->gw);
    }
    dest = arp_lookup(queryaddr);
  }

  /* If the arp_lookup() didn't find an address, we send out an ARP query for the IP address. */
  if(dest==NULL) {
    q=arp_query(netif,ethskl->ethaddr,queryaddr);
    if(q!=NULL) {
      err=low_level_output(ethskl,q);
      pbuf_free(q);
      return err;
    }
    return ERR_MEM;
  }

  ethhdr=p->payload;

  for(i=0;i<3;i++) {
    ethhdr->dest.addr[i]=dest->addr[i];
    ethhdr->src.addr[i]=ethskl->ethaddr->addr[i];
  }
  
  ethhdr->type=htons(ETHTYPE_IP);
  
  return low_level_output(ethskl,p);
}
/*-----------------------------------------------------------------------------------*/
/*
 * ethskl_input():
 *
 * This function should be called when a packet is ready to be read
 * from the interface. It uses the function low_level_input() that
 * should handle the actual reception of bytes from the network
 * interface.
 *
 */
/*-----------------------------------------------------------------------------------*/
void ethskl_input(struct netif *netif)
{
  struct ethskl *ethskl;
  struct eth_hdr *ethhdr;
  struct pbuf *p;

  ethskl=netif->state;
  p=low_level_input(ethskl);

  if(p!=NULL) {
    ethhdr=p->payload;
    switch(htons(ethhdr->type)) {
    case ETHTYPE_IP:
      arp_ip_input(netif,p);
      pbuf_header(p,-14);
      netif->input(p,netif);
      break;
    case ETHTYPE_ARP:
      p=arp_arp_input(netif,ethskl->ethaddr,p);
      if(p!=NULL) {
	low_level_output(ethskl,p);
	pbuf_free(p);
      }
      break;
    default:
      pbuf_free(p);
      break;
    }
  }
}
/*-----------------------------------------------------------------------------------*/
/*
 * ethskl_init():
 */
/*-----------------------------------------------------------------------------------*/
void ethskl_init(struct netif *netif)
{
  struct ethskl *ethskl;
    
  ethskl = mem_malloc(sizeof(struct ethskl));
  netif->state = ethskl;
  netif->name[0] = IFNAME0;
  netif->name[1] = IFNAME1;
  netif->output = ethskl_output;
  
  ethskl->ethaddr=(struct eth_addr *)&(netif->hwaddr[0]);
  
  low_level_init(netif);
  arp_init();  
}
/*-----------------------------------------------------------------------------------*/
